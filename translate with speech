<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Language Translator</title>
    <link rel="icon" type="image/x-icon" href="/fevicon.jpeg">
    <!-- <link rel="icon" href="./fevicon.jpeg"> -->
    <style>
   */
        * {
            padding: 0;
            margin: 0;
            box-sizing: border-box;
            font-family: "Poppins", Lalezar, cursive, sans-serif;
        }
        body{
            background-image: url('./translator.jpeg');
            background-size: cover; 
            background-repeat: no-repeat;
            background-position: center; 
        }
        body {
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 0 10px;
            min-height: 100vh;
        }
        .container {
            max-width: 700px;
            width: 100%;
            padding: 30px;
            background: #fff;
            border-radius: 1rem;
            /* box-shadow: 0px 0px 36px -5px #094221; */
        }

        .wrapper {
            border-radius: 5px;
            border: 1px solid #ccc;
        }

        .text-input {
            display: flex;
            flex-direction: column;
        }

        .text-input textarea {
            height: 250px;
            width: 100%;
            border: none;
            outline: none;
            resize: none;
            background: none;
            font-size: 18px;
            padding: 10px 15px;
            border-radius: 0.3rem;
            margin-bottom: 15px;
        }

        .text-input textarea::placeholder {
            color: #b7b6b6;
        }

        .controls {
            list-style: none;
            padding: 12px 15px;
            border-top: 1px solid #ccc;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .row {
            display: flex;
            align-items: center;
        }

        .icons ion-icon {
            width: 500px;
            color: #adadad;
            font-size: 1.7rem;
            cursor: pointer;
            transition: transform 0.2s ease;
            justify-content: center;
        }

        .icons ion-icon:hover {
            transform: scale(1.1);
        }

        .exchange {
            color: #adadad;
            cursor: pointer;
            font-size: 1.7rem;
            transition: transform 0.2s ease;
        }

        .exchange:hover {
            transform: scale(1.1);
        }
        .tr{
            width: 100%;
            padding: 14px;
            outline: none;
            border: none;
            color: #fff;
            cursor: pointer;
            margin-top: 20px;
            font-size: 1.2rem;
            border-radius: 0.3rem;
            background: #333333;
        }
        .tb {
            align-items: center;
            align-content: center;
            text-align: center;
            margin-left: auto; /* Aligns the button to the middle */
            margin-right: auto; /* Aligns the button to the middle */
        }

        @media (max-width: 660px) {
            .container {
                padding: 20px;
            }

            .text-input textarea {
                height: 200px;
            }

            .controls .row .icons {
                display: inline-flex;
                flex-direction: column;
            }

            button {
                padding: 13px;
                font-size: 1.2rem;
            }

            .controls .row select {
                font-size: 1.2rem;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="wrapper">
            <div class="text-input">
                <textarea spellcheck="false" class="from-text" placeholder="Enter text"></textarea>
                <ul class="controls">
                    <li class="row from">
                        <div class="icons">
                            <ion-icon id="from" name="volume-medium-outline"></ion-icon>
                            <ion-icon id="from" name="copy-outline"></ion-icon>
                        </div>
                        <select></select>
                    </li>
                    <button id="startBtn" class="tb" >Start Speech Recognition</button>
                    <li class="exchange">
                        <ion-icon name="swap-vertical"></ion-icon>
                    <li class="row to">
                        <select></select>
                        <div class="icons">
                            <ion-icon id="to" name="volume-medium-outline"></ion-icon>
                            <ion-icon id="to" name="copy-outline"></ion-icon>
                        </div>
                    </li>
                </ul>
                <textarea spellcheck="false" readonly disabled class="to-text" placeholder="Translation"></textarea>
            </div>
        </div>
        <button class="tr">Translate it</button>
    </div>
    <script>
        const languages = {
            "am-ET": "Amharic",
  "ar-SA": "Arabic",
  "be-BY": "Bielarus",
  "bem-ZM": "Bemba",
  "bi-VU": "Bislama",
  "bjs-BB": "Bajan",
  "bn-IN": "Bengali",
  "bo-CN": "Tibetan",
  "br-FR": "Breton",
  "bs-BA": "Bosnian",
  "ca-ES": "Catalan",
  "cop-EG": "Coptic",
  "cs-CZ": "Czech",
  "cy-GB": "Welsh",
  "da-DK": "Danish",
  "dz-BT": "Dzongkha",
  "de-DE": "German",
  "dv-MV": "Maldivian",
  "el-GR": "Greek",
  "en-GB": "English",
  "es-ES": "Spanish",
  "et-EE": "Estonian",
  "eu-ES": "Basque",
  "fa-IR": "Persian",
  "fi-FI": "Finnish",
  "fn-FNG": "Fanagalo",
  "fo-FO": "Faroese",
  "fr-FR": "French",
  "gl-ES": "Galician",
  "gu-IN": "Gujarati",
  "ha-NE": "Hausa",
  "he-IL": "Hebrew",
  "hi-IN": "Hindi",
  "hr-HR": "Croatian",
  "hu-HU": "Hungarian",
  "id-ID": "Indonesian",
  "is-IS": "Icelandic",
  "it-IT": "Italian",
  "ja-JP": "Japanese",
  "kk-KZ": "Kazakh",
  "km-KM": "Khmer",
  "kn-IN": "Kannada",
  "ko-KR": "Korean",
  "ku-TR": "Kurdish",
  "ky-KG": "Kyrgyz",
  "la-VA": "Latin",
  "lo-LA": "Lao",
  "lv-LV": "Latvian",
  "men-SL": "Mende",
  "mg-MG": "Malagasy",
  "mi-NZ": "Maori",
  "ms-MY": "Malay",
  "mt-MT": "Maltese",
  "my-MM": "Burmese",
  "ne-NP": "Nepali",
  "niu-NU": "Niuean",
  "nl-NL": "Dutch",
  "no-NO": "Norwegian",
  "ny-MW": "Nyanja",
  "ur-PK": "Pakistani",
  "pau-PW": "Palauan",
  "pa-IN": "Panjabi",
  "ps-PK": "Pashto",
  "pis-SB": "Pijin",
  "pl-PL": "Polish",
  "pt-PT": "Portuguese",
  "rn-BI": "Kirundi",
  "ro-RO": "Romanian",
  "ru-RU": "Russian",
  "sg-CF": "Sango",
  "si-LK": "Sinhala",
  "sk-SK": "Slovak",
  "sm-WS": "Samoan",
  "sn-ZW": "Shona",
  "so-SO": "Somali",
  "sq-AL": "Albanian",
  "sr-RS": "Serbian",
  "sv-SE": "Swedish",
  "sw-SZ": "Swahili",
  "ta-LK": "Tamil",
  "te-IN": "Telugu",
  "tet-TL": "Tetum",
  "tg-TJ": "Tajik",
  "th-TH": "Thai",
  "ti-TI": "Tigrinya",
  "tk-TM": "Turkmen",
  "tl-PH": "Tagalog",
  "tn-BW": "Tswana",
  "to-TO": "Tongan",
  "tr-TR": "Turkish",
  "uk-UA": "Ukrainian",
  "uz-UZ": "Uzbek",
  "vi-VN": "Vietnamese",
  "wo-SN": "Wolof",
  "xh-ZA": "Xhosa",
  "yi-YD": "Yiddish",
  "zu-ZA": "Zulu"
            
        };

        const fromText = document.querySelector(".from-text"),
            toText = document.querySelector(".to-text"),
            exchangeIcon = document.querySelector(".exchange"),
            selectTags = document.querySelectorAll("select"),
            icons = document.querySelectorAll(".row ion-icon"),
            translateBtn = document.querySelector("button");

        selectTags.forEach((tag, id) => {
            for (let lang_code in languages) {
                let selected =
                    id == 0
                        ? lang_code == "en-GB"
                            ? "selected"
                            : ""
                        : lang_code == "fa-IR"
                            ? "selected"
                            : "";
                let option = `<option ${selected} value="${lang_code}">${languages[lang_code]}</option>`;
                tag.insertAdjacentHTML("beforeend", option);
            }
        });

        fromText.addEventListener("keyup", () => {
            if (!fromText.value) {
                toText.value = "";
            }
        });

        translateBtn.addEventListener("click", () => {
            let text = fromText.value.trim(),
                translateFrom = selectTags[0].value,
                translateTo = selectTags[1].value;
            if (!text) return;
            toText.setAttribute("placeholder", "Translating...");
            let apiUrl = `https://api.mymemory.translated.net/get?q=${text}&langpair=${translateFrom}|${translateTo}`;
            fetch(apiUrl)
                .then((res) => res.json())
                .then((data) => {
                    toText.value = data.responseData.translatedText;
                    data.matches.forEach((data) => {
                        if (data.id === 0) {
                            toText.value = data.translation;
                        }
                    });
                    toText.setAttribute("placeholder", "Translation");
                });
        });

        exchangeIcon.addEventListener("click", () => {
            let tempText = fromText.value,
                tempLang = selectTags[0].value;
            fromText.value = toText.value;
            toText.value = tempText;
            selectTags[0].value = selectTags[1].value;
            selectTags[1].value = tempLang;
        });

        icons.forEach((icon) => {
            icon.addEventListener("click", ({ target }) => {
                if (!fromText.value || !toText.value) return;
                if (target.getAttribute("name") == "copy-outline") {
                    if (target.id == "from") {
                        navigator.clipboard.writeText(fromText.value);
                    } else {
                        navigator.clipboard.writeText(toText.value);
                    }
                } else {
                    let utterance;
                    if (target.id == "from") {
                        utterance = new SpeechSynthesisUtterance(fromText.value);
                        utterance.lang = selectTags[0].value;
                    } else {
                        utterance = new SpeechSynthesisUtterance(toText.value);
                        utterance.lang = selectTags[1].value;
                    }
                    speechSynthesis.speak(utterance);
                }
            });
        });
  
    </script>
    <script>
        if ('SpeechRecognition' in window || 'webkitSpeechRecognition' in window) {
            var recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.lang = 'en-US'; 
            recognition.interimResults = false;
            function startRecognition() {
                recognition.start();
                console.log('Speech recognition started...');
            }
            recognition.onresult = function(event) {
                var transcript = event.results[0][0].transcript;
                console.log('Speech recognized:', transcript);  
            };
            recognition.onerror = function(event) {
                console.error('Speech recognition error:', event.error);
            };
            document.getElementById('startBtn').addEventListener('click', startRecognition);
            document.addEventListener('keydown', function(event) {
                if ((event.key === 'h' && event.ctrlKey && event.altKey) || event.key === 'F5') {
                    startRecognition(); 
                    event.preventDefault();
                }
            });
        } else {
            console.error('Speech recognition is not supported in this browser.');
        }
        </script>
</body>

</html>
